name: Python package processing and pushing

on:
  push:
    branches:
    - main
    - 2-speed-up-github-actions
    paths:
    - 'packagename_jarne/**'
    - '*.py'
    - '*.yml'
    - 'docs/source/**'
    - '.github/**'

  pull_request:
    branches:
    - main
    paths: 
    - 'packagename_jarne/**'
    - '*.py'
    - '*.yml'
    - 'docs/source/**'


jobs:

  build:
    strategy:
      matrix:
          include:
            - os: ubuntu-latest
              label: linux-64
              prefix: /usr/share/miniconda3/envs/my-env

            - os: macos-latest
              label: osx-64
              prefix: /Users/runner/miniconda3/envs/my-env

            - os: windows-latest
              label: win-64
              prefix: C:\Miniconda3\envs\my-env

    name: ${{ matrix.label }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
            miniforge-variant: Mambaforge
            miniforge-version: latest
            activate-environment: my-env
            use-mamba: true

      - name: Set cache date
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - uses: actions/cache@v2
        with:
          path: ${{ matrix.prefix }}
          key: ${{ matrix.label }}-conda-${{ hashFiles('environment.yml') }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
        id: cache

      - name: Update environment
        run: mamba env update -n my-env -f environment_build.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Build documentation html
        run: |
          cd docs;make html;cd ..


  #   runs-on: ubuntu-latest
  #   env:
  #     TWINE_USERNAME: __token__
  #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       fetch-depth: 0
  #       ref: ${{ github.event.pull_request.head.ref }}
  #   - name: Set up Python 3.9
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.9'

  #   - name: Add conda to system path
  #     run: |
  #       # $CONDA is an environment variable pointing to the root of the miniconda directory
  #       echo $CONDA/bin >> $GITHUB_PATH

  #   - name: Install dependencies
  #     run: |
  #       conda env update --file environment_build.yml --name base

  #   - name: Build documentation html
  #     run: |
  #       cd docs;make html;cd ..
    
  #   - name: Build documentation
  #     run: |
  #       cd docs;make html markdown;cd ..

  #   - name: Upload to pypi
  #     if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
  #     run: |-
  #       python3 setup.py upload

  #   - name: Commit and push documentation 
  #     if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
  #     run: |-
  #       git config user.name "Automated"
  #       git config user.email "actions@users.noreply.github.com"
  #       git add -A -f docs/build/**
  #       timestamp=$(date -u)
  #       git commit -m "Created documentation from github actions: ${timestamp}" || exit 0
  #       git push

  # update-pages:
  #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   needs: build-linux
  #   permissions:
  #     pages: write      # to deploy to Pages
  #     id-token: write
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       fetch-depth: 0
  #   - run: git stash
  #   - run: git checkout HEAD^
  #   - name: Setup Pages
  #     uses: actions/configure-pages@v3
  #   - name: Upload artifact
  #     uses: actions/upload-pages-artifact@v1
  #     with:
  #       # Upload entire repository
  #       path: 'docs/build/html'
  #   - name: Deploy to GitHub Pages
  #     id: deployment
  #     uses: actions/deploy-pages@v1
