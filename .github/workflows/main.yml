name: Python package processing and pushing

on:
  push:
    branches:
    - main
    - dev
    paths:
    - '**.py'
    - '**.yml'
    - '**.rst'
    - '!**.md'
    - '!docs/build/**'

  pull_request:
    branches:
    - main
    - dev
    paths: 
    - '**.py'
    - '**.yml'
    - '**.rst'
    - '!**.md'
    - '!docs/build/**'

env:
  CACHE_NUMBER: 0  # increase to reset cache manually
  
jobs:

  build:
    strategy:
      matrix:
          include:
            - os: ubuntu-latest
              label: linux-64
              prefix: /usr/share/miniconda3/envs/my-env

            # - os: macos-latest
            #   label: osx-64
            #   prefix: /Users/runner/miniconda3/envs/my-env

            # - os: windows-latest
            #   label: win-64
            #   prefix: C:\Miniconda3\envs\my-env

    name: ${{ matrix.label }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
            miniforge-variant: Mambaforge
            miniforge-version: latest
            activate-environment: my-env
            use-mamba: true

      - name: Set cache date
        run: echo "DATE=$(date +'%Y%m')" >> $GITHUB_ENV

      - uses: actions/cache@v3
        with:
          path: ${{ matrix.prefix }}
          key: ${{ matrix.label }}-conda-${{ hashFiles('environment_build.yml') }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
        id: cache

      - name: Update environment
        run: mamba env update -n my-env -f environment_build.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Run tests
        shell: bash -l {0}
        run: cd tests;python3 -m unittest -b && cd ..
  
  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
    steps:
    - uses: actions/checkout@v3

    - name: Setup Mambaforge
      uses: conda-incubator/setup-miniconda@v2
      with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: my-env
          use-mamba: true
    - name: Set cache date
      run: echo "DATE=$(date +'%Y%m')" >> $GITHUB_ENV

    - uses: actions/cache@v3
      with:
        path: /usr/share/miniconda3/envs/my-env
        key: linux-64-conda-${{ hashFiles('environment_build.yml') }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
      id: cache

    - name: Install graphviz
      run: sudo apt-get install graphviz

    - name: Build documentation
      shell: bash -l {0}
      run: |
        cd docs;make html markdown;cd ..

    - name: Upload to pypi
      shell: bash -l {0}
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |-
        python3 setup.py upload

    - name: Commit and push documentation 
      shell: bash -l {0}
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' )&& github.event_name != 'pull_request'
      run: |-
        git config user.name "Automated"
        git config user.email "actions@users.noreply.github.com"
        git add -A -f docs/build/**
        timestamp=$(date -u)
        git commit -m "Created documentation from github actions: ${timestamp}" || exit 0
        git push

  update-pages:
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: publish-pypi
    permissions:
      pages: write      # to deploy to Pages
      id-token: write
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - run: git stash
    - run: git checkout HEAD^
    - name: Setup Pages
      uses: actions/configure-pages@v3
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v1
      with:
        # Upload entire repository
        path: 'docs/build/html'
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v1
